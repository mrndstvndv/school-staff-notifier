// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: issues.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "main";

export interface Student {
  firstName: string;
  lastName: string;
  section: string;
  course: string;
  professor: string;
  year: number;
}

export interface Issue {
  student: Student | undefined;
  labRoom: string;
  pcNumber: number;
  concern: string;
  issues: string[];
}

function createBaseStudent(): Student {
  return { firstName: "", lastName: "", section: "", course: "", professor: "", year: 0 };
}

export const Student: MessageFns<Student> = {
  encode(message: Student, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.section !== "") {
      writer.uint32(26).string(message.section);
    }
    if (message.course !== "") {
      writer.uint32(34).string(message.course);
    }
    if (message.professor !== "") {
      writer.uint32(42).string(message.professor);
    }
    if (message.year !== 0) {
      writer.uint32(48).int32(message.year);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Student {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStudent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.section = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.course = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.professor = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.year = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Student {
    return {
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      section: isSet(object.section) ? globalThis.String(object.section) : "",
      course: isSet(object.course) ? globalThis.String(object.course) : "",
      professor: isSet(object.professor) ? globalThis.String(object.professor) : "",
      year: isSet(object.year) ? globalThis.Number(object.year) : 0,
    };
  },

  toJSON(message: Student): unknown {
    const obj: any = {};
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.section !== "") {
      obj.section = message.section;
    }
    if (message.course !== "") {
      obj.course = message.course;
    }
    if (message.professor !== "") {
      obj.professor = message.professor;
    }
    if (message.year !== 0) {
      obj.year = Math.round(message.year);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Student>, I>>(base?: I): Student {
    return Student.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Student>, I>>(object: I): Student {
    const message = createBaseStudent();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.section = object.section ?? "";
    message.course = object.course ?? "";
    message.professor = object.professor ?? "";
    message.year = object.year ?? 0;
    return message;
  },
};

function createBaseIssue(): Issue {
  return { student: undefined, labRoom: "", pcNumber: 0, concern: "", issues: [] };
}

export const Issue: MessageFns<Issue> = {
  encode(message: Issue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.student !== undefined) {
      Student.encode(message.student, writer.uint32(10).fork()).join();
    }
    if (message.labRoom !== "") {
      writer.uint32(18).string(message.labRoom);
    }
    if (message.pcNumber !== 0) {
      writer.uint32(24).int32(message.pcNumber);
    }
    if (message.concern !== "") {
      writer.uint32(34).string(message.concern);
    }
    for (const v of message.issues) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Issue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.student = Student.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.labRoom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pcNumber = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.concern = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.issues.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Issue {
    return {
      student: isSet(object.student) ? Student.fromJSON(object.student) : undefined,
      labRoom: isSet(object.labRoom) ? globalThis.String(object.labRoom) : "",
      pcNumber: isSet(object.pcNumber) ? globalThis.Number(object.pcNumber) : 0,
      concern: isSet(object.concern) ? globalThis.String(object.concern) : "",
      issues: globalThis.Array.isArray(object?.issues) ? object.issues.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Issue): unknown {
    const obj: any = {};
    if (message.student !== undefined) {
      obj.student = Student.toJSON(message.student);
    }
    if (message.labRoom !== "") {
      obj.labRoom = message.labRoom;
    }
    if (message.pcNumber !== 0) {
      obj.pcNumber = Math.round(message.pcNumber);
    }
    if (message.concern !== "") {
      obj.concern = message.concern;
    }
    if (message.issues?.length) {
      obj.issues = message.issues;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Issue>, I>>(base?: I): Issue {
    return Issue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Issue>, I>>(object: I): Issue {
    const message = createBaseIssue();
    message.student = (object.student !== undefined && object.student !== null)
      ? Student.fromPartial(object.student)
      : undefined;
    message.labRoom = object.labRoom ?? "";
    message.pcNumber = object.pcNumber ?? 0;
    message.concern = object.concern ?? "";
    message.issues = object.issues?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
